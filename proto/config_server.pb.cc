// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config_server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace config_server {

namespace {

const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigUpdateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigUpdateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigNotifyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigNotifyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRefreshRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRefreshRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusQueryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusQueryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusQueryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusQueryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerAcquireRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerAcquireRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerAcquireResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerAcquireResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdIDs_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NetworkType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_5fserver_2eproto() {
  protobuf_AddDesc_config_5fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config_server.proto");
  GOOGLE_CHECK(file != NULL);
  Status_descriptor_ = file->message_type(0);
  static const int Status_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, server_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, network_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, last_activity_),
  };
  Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Status));
  ConfigGetRequest_descriptor_ = file->message_type(1);
  static const int ConfigGetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetRequest, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetRequest, path_),
  };
  ConfigGetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigGetRequest_descriptor_,
      ConfigGetRequest::default_instance_,
      ConfigGetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigGetRequest));
  ConfigGetResponse_descriptor_ = file->message_type(2);
  static const int ConfigGetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetResponse, config_),
  };
  ConfigGetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigGetResponse_descriptor_,
      ConfigGetResponse::default_instance_,
      ConfigGetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigGetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigGetResponse));
  ConfigUpdateRequest_descriptor_ = file->message_type(3);
  static const int ConfigUpdateRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdateRequest, service_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdateRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdateRequest, new_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdateRequest, old_config_),
  };
  ConfigUpdateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigUpdateRequest_descriptor_,
      ConfigUpdateRequest::default_instance_,
      ConfigUpdateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigUpdateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigUpdateRequest));
  ConfigNotifyRequest_descriptor_ = file->message_type(4);
  static const int ConfigNotifyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigNotifyRequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigNotifyRequest, config_),
  };
  ConfigNotifyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigNotifyRequest_descriptor_,
      ConfigNotifyRequest::default_instance_,
      ConfigNotifyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigNotifyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigNotifyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigNotifyRequest));
  StatusRegisterRequest_descriptor_ = file->message_type(5);
  static const int StatusRegisterRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRegisterRequest, status_),
  };
  StatusRegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRegisterRequest_descriptor_,
      StatusRegisterRequest::default_instance_,
      StatusRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRegisterRequest));
  StatusRefreshRequest_descriptor_ = file->message_type(6);
  static const int StatusRefreshRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRefreshRequest, status_),
  };
  StatusRefreshRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRefreshRequest_descriptor_,
      StatusRefreshRequest::default_instance_,
      StatusRefreshRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRefreshRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRefreshRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRefreshRequest));
  StatusQueryRequest_descriptor_ = file->message_type(7);
  static const int StatusQueryRequest_offsets_[1] = {
  };
  StatusQueryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusQueryRequest_descriptor_,
      StatusQueryRequest::default_instance_,
      StatusQueryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusQueryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusQueryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusQueryRequest));
  StatusQueryResponse_descriptor_ = file->message_type(8);
  static const int StatusQueryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusQueryResponse, status_),
  };
  StatusQueryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusQueryResponse_descriptor_,
      StatusQueryResponse::default_instance_,
      StatusQueryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusQueryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusQueryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusQueryResponse));
  ServerAcquireRequest_descriptor_ = file->message_type(9);
  static const int ServerAcquireRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAcquireRequest, service_type_),
  };
  ServerAcquireRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerAcquireRequest_descriptor_,
      ServerAcquireRequest::default_instance_,
      ServerAcquireRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAcquireRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAcquireRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerAcquireRequest));
  ServerAcquireResponse_descriptor_ = file->message_type(10);
  static const int ServerAcquireResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAcquireResponse, server_addr_),
  };
  ServerAcquireResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerAcquireResponse_descriptor_,
      ServerAcquireResponse::default_instance_,
      ServerAcquireResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAcquireResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerAcquireResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerAcquireResponse));
  CommonResponse_descriptor_ = file->message_type(11);
  static const int CommonResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, code_),
  };
  CommonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonResponse_descriptor_,
      CommonResponse::default_instance_,
      CommonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonResponse));
  CmdIDs_descriptor_ = file->enum_type(0);
  NetworkType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_5fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigGetRequest_descriptor_, &ConfigGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigGetResponse_descriptor_, &ConfigGetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigUpdateRequest_descriptor_, &ConfigUpdateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigNotifyRequest_descriptor_, &ConfigNotifyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRegisterRequest_descriptor_, &StatusRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRefreshRequest_descriptor_, &StatusRefreshRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusQueryRequest_descriptor_, &StatusQueryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusQueryResponse_descriptor_, &StatusQueryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerAcquireRequest_descriptor_, &ServerAcquireRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerAcquireResponse_descriptor_, &ServerAcquireResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonResponse_descriptor_, &CommonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_5fserver_2eproto() {
  delete Status::default_instance_;
  delete Status_reflection_;
  delete ConfigGetRequest::default_instance_;
  delete ConfigGetRequest_reflection_;
  delete ConfigGetResponse::default_instance_;
  delete ConfigGetResponse_reflection_;
  delete ConfigUpdateRequest::default_instance_;
  delete ConfigUpdateRequest_reflection_;
  delete ConfigNotifyRequest::default_instance_;
  delete ConfigNotifyRequest_reflection_;
  delete StatusRegisterRequest::default_instance_;
  delete StatusRegisterRequest_reflection_;
  delete StatusRefreshRequest::default_instance_;
  delete StatusRefreshRequest_reflection_;
  delete StatusQueryRequest::default_instance_;
  delete StatusQueryRequest_reflection_;
  delete StatusQueryResponse::default_instance_;
  delete StatusQueryResponse_reflection_;
  delete ServerAcquireRequest::default_instance_;
  delete ServerAcquireRequest_reflection_;
  delete ServerAcquireResponse::default_instance_;
  delete ServerAcquireResponse_reflection_;
  delete CommonResponse::default_instance_;
  delete CommonResponse_reflection_;
}

void protobuf_AddDesc_config_5fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023config_server.proto\022\rconfig_server\"\260\001\n"
    "\006Status\022\023\n\013server_addr\030\001 \002(\t\022\024\n\014service_"
    "type\030\002 \002(\t\0220\n\014network_type\030\003 \001(\0162\032.confi"
    "g_server.NetworkType\022\024\n\014service_name\030\004 \001"
    "(\t\022\014\n\004load\030\005 \001(\r\022\016\n\006status\030\006 \001(\r\022\025\n\rlast"
    "_activity\030\007 \001(\r\"9\n\020ConfigGetRequest\022\024\n\014s"
    "ervice_type\030\001 \002(\t\022\017\n\004path\030\002 \001(\t:\001.\"#\n\021Co"
    "nfigGetResponse\022\016\n\006config\030\001 \002(\t\"a\n\023Confi"
    "gUpdateRequest\022\024\n\014service_type\030\001 \002(\t\022\014\n\004"
    "path\030\002 \002(\t\022\022\n\nnew_config\030\003 \002(\t\022\022\n\nold_co"
    "nfig\030\004 \002(\t\"3\n\023ConfigNotifyRequest\022\014\n\004pat"
    "h\030\001 \002(\t\022\016\n\006config\030\002 \002(\t\">\n\025StatusRegiste"
    "rRequest\022%\n\006status\030\001 \002(\0132\025.config_server"
    ".Status\"=\n\024StatusRefreshRequest\022%\n\006statu"
    "s\030\001 \002(\0132\025.config_server.Status\"\024\n\022Status"
    "QueryRequest\"<\n\023StatusQueryResponse\022%\n\006s"
    "tatus\030\001 \003(\0132\025.config_server.Status\",\n\024Se"
    "rverAcquireRequest\022\024\n\014service_type\030\001 \002(\t"
    "\",\n\025ServerAcquireResponse\022\023\n\013server_addr"
    "\030\001 \002(\t\"\036\n\016CommonResponse\022\014\n\004code\030\001 \002(\r*\260"
    "\001\n\006CmdIDs\022\023\n\017CmdID_ConfigGet\020\001\022\026\n\022CmdID_"
    "ConfigUpdate\020\002\022\026\n\022CmdID_ConfigNotify\020\003\022\030"
    "\n\024CmdID_StatusRegister\020\004\022\027\n\023CmdID_Status"
    "Refresh\020\005\022\025\n\021CmdID_StatusQuery\020\006\022\027\n\023CmdI"
    "D_ServerAcquire\020\007*B\n\013NetworkType\022\017\n\013NET_"
    "UNKNOWN\020\001\022\n\n\006NET_CT\020\002\022\n\n\006NET_CN\020\003\022\n\n\006NET"
    "_CM\020\0042\220\004\n\rConfigService\022N\n\tConfigGet\022\037.c"
    "onfig_server.ConfigGetRequest\032 .config_s"
    "erver.ConfigGetResponse\022Q\n\014ConfigUpdate\022"
    "\".config_server.ConfigUpdateRequest\032\035.co"
    "nfig_server.CommonResponse\022U\n\016StatusRegi"
    "ster\022$.config_server.StatusRegisterReque"
    "st\032\035.config_server.CommonResponse\022S\n\rSta"
    "tusRefresh\022#.config_server.StatusRefresh"
    "Request\032\035.config_server.CommonResponse\022T"
    "\n\013StatusQuery\022!.config_server.StatusQuer"
    "yRequest\032\".config_server.StatusQueryResp"
    "onse\022Z\n\rServerAcquire\022#.config_server.Se"
    "rverAcquireRequest\032$.config_server.Serve"
    "rAcquireResponse", 1576);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config_server.proto", &protobuf_RegisterTypes);
  Status::default_instance_ = new Status();
  ConfigGetRequest::default_instance_ = new ConfigGetRequest();
  ConfigGetResponse::default_instance_ = new ConfigGetResponse();
  ConfigUpdateRequest::default_instance_ = new ConfigUpdateRequest();
  ConfigNotifyRequest::default_instance_ = new ConfigNotifyRequest();
  StatusRegisterRequest::default_instance_ = new StatusRegisterRequest();
  StatusRefreshRequest::default_instance_ = new StatusRefreshRequest();
  StatusQueryRequest::default_instance_ = new StatusQueryRequest();
  StatusQueryResponse::default_instance_ = new StatusQueryResponse();
  ServerAcquireRequest::default_instance_ = new ServerAcquireRequest();
  ServerAcquireResponse::default_instance_ = new ServerAcquireResponse();
  CommonResponse::default_instance_ = new CommonResponse();
  Status::default_instance_->InitAsDefaultInstance();
  ConfigGetRequest::default_instance_->InitAsDefaultInstance();
  ConfigGetResponse::default_instance_->InitAsDefaultInstance();
  ConfigUpdateRequest::default_instance_->InitAsDefaultInstance();
  ConfigNotifyRequest::default_instance_->InitAsDefaultInstance();
  StatusRegisterRequest::default_instance_->InitAsDefaultInstance();
  StatusRefreshRequest::default_instance_->InitAsDefaultInstance();
  StatusQueryRequest::default_instance_->InitAsDefaultInstance();
  StatusQueryResponse::default_instance_->InitAsDefaultInstance();
  ServerAcquireRequest::default_instance_->InitAsDefaultInstance();
  ServerAcquireResponse::default_instance_->InitAsDefaultInstance();
  CommonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_5fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_5fserver_2eproto {
  StaticDescriptorInitializer_config_5fserver_2eproto() {
    protobuf_AddDesc_config_5fserver_2eproto();
  }
} static_descriptor_initializer_config_5fserver_2eproto_;

const ::google::protobuf::EnumDescriptor* CmdIDs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdIDs_descriptor_;
}
bool CmdIDs_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NetworkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkType_descriptor_;
}
bool NetworkType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Status::kServerAddrFieldNumber;
const int Status::kServiceTypeFieldNumber;
const int Status::kNetworkTypeFieldNumber;
const int Status::kServiceNameFieldNumber;
const int Status::kLoadFieldNumber;
const int Status::kStatusFieldNumber;
const int Status::kLastActivityFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Status::InitAsDefaultInstance() {
}

Status::Status(const Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_type_ = 1;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  load_ = 0u;
  status_ = 0u;
  last_activity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Status::~Status() {
  SharedDtor();
}

void Status::SharedDtor() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete server_addr_;
  }
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New() const {
  return new Status;
}

void Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_addr()) {
      if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
        server_addr_->clear();
      }
    }
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
    network_type_ = 1;
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    load_ = 0u;
    status_ = 0u;
    last_activity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_service_type;
        break;
      }
      
      // required string service_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_type().data(), this->service_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_network_type;
        break;
      }
      
      // optional .config_server.NetworkType network_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (config_server::NetworkType_IsValid(value)) {
            set_network_type(static_cast< config_server::NetworkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_load;
        break;
      }
      
      // optional uint32 load = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // optional uint32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_activity;
        break;
      }
      
      // optional uint32 last_activity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_)));
          set_has_last_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string server_addr = 1;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_addr(), output);
  }
  
  // required string service_type = 2;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->service_type(), output);
  }
  
  // optional .config_server.NetworkType network_type = 3;
  if (has_network_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->network_type(), output);
  }
  
  // optional string service_name = 4;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->service_name(), output);
  }
  
  // optional uint32 load = 5;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->load(), output);
  }
  
  // optional uint32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }
  
  // optional uint32 last_activity = 7;
  if (has_last_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_activity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string server_addr = 1;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_addr(), target);
  }
  
  // required string service_type = 2;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_type(), target);
  }
  
  // optional .config_server.NetworkType network_type = 3;
  if (has_network_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->network_type(), target);
  }
  
  // optional string service_name = 4;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service_name(), target);
  }
  
  // optional uint32 load = 5;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->load(), target);
  }
  
  // optional uint32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }
  
  // optional uint32 last_activity = 7;
  if (has_last_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_activity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_addr = 1;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }
    
    // required string service_type = 2;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }
    
    // optional .config_server.NetworkType network_type = 3;
    if (has_network_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network_type());
    }
    
    // optional string service_name = 4;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional uint32 load = 5;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load());
    }
    
    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }
    
    // optional uint32 last_activity = 7;
    if (has_last_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_addr()) {
      set_server_addr(from.server_addr());
    }
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_network_type()) {
      set_network_type(from.network_type());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_load()) {
      set_load(from.load());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last_activity()) {
      set_last_activity(from.last_activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Status::Swap(Status* other) {
  if (other != this) {
    std::swap(server_addr_, other->server_addr_);
    std::swap(service_type_, other->service_type_);
    std::swap(network_type_, other->network_type_);
    std::swap(service_name_, other->service_name_);
    std::swap(load_, other->load_);
    std::swap(status_, other->status_);
    std::swap(last_activity_, other->last_activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ConfigGetRequest::_default_path_(".");
#ifndef _MSC_VER
const int ConfigGetRequest::kServiceTypeFieldNumber;
const int ConfigGetRequest::kPathFieldNumber;
#endif  // !_MSC_VER

ConfigGetRequest::ConfigGetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigGetRequest::InitAsDefaultInstance() {
}

ConfigGetRequest::ConfigGetRequest(const ConfigGetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigGetRequest::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigGetRequest::~ConfigGetRequest() {
  SharedDtor();
}

void ConfigGetRequest::SharedDtor() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ConfigGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigGetRequest_descriptor_;
}

const ConfigGetRequest& ConfigGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

ConfigGetRequest* ConfigGetRequest::default_instance_ = NULL;

ConfigGetRequest* ConfigGetRequest::New() const {
  return new ConfigGetRequest;
}

void ConfigGetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &_default_path_) {
        path_->assign(_default_path_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_type().data(), this->service_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2 [default = "."];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_type(), output);
  }
  
  // optional string path = 2 [default = "."];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigGetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_type(), target);
  }
  
  // optional string path = 2 [default = "."];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigGetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }
    
    // optional string path = 2 [default = "."];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigGetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigGetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigGetRequest::MergeFrom(const ConfigGetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGetRequest::CopyFrom(const ConfigGetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ConfigGetRequest::Swap(ConfigGetRequest* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigGetRequest_descriptor_;
  metadata.reflection = ConfigGetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigGetResponse::kConfigFieldNumber;
#endif  // !_MSC_VER

ConfigGetResponse::ConfigGetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigGetResponse::InitAsDefaultInstance() {
}

ConfigGetResponse::ConfigGetResponse(const ConfigGetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigGetResponse::SharedCtor() {
  _cached_size_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigGetResponse::~ConfigGetResponse() {
  SharedDtor();
}

void ConfigGetResponse::SharedDtor() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void ConfigGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigGetResponse_descriptor_;
}

const ConfigGetResponse& ConfigGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

ConfigGetResponse* ConfigGetResponse::default_instance_ = NULL;

ConfigGetResponse* ConfigGetResponse::New() const {
  return new ConfigGetResponse;
}

void ConfigGetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigGetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigGetResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigGetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigGetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigGetResponse::MergeFrom(const ConfigGetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigGetResponse::CopyFrom(const ConfigGetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigGetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ConfigGetResponse::Swap(ConfigGetResponse* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigGetResponse_descriptor_;
  metadata.reflection = ConfigGetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigUpdateRequest::kServiceTypeFieldNumber;
const int ConfigUpdateRequest::kPathFieldNumber;
const int ConfigUpdateRequest::kNewConfigFieldNumber;
const int ConfigUpdateRequest::kOldConfigFieldNumber;
#endif  // !_MSC_VER

ConfigUpdateRequest::ConfigUpdateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigUpdateRequest::InitAsDefaultInstance() {
}

ConfigUpdateRequest::ConfigUpdateRequest(const ConfigUpdateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigUpdateRequest::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  old_config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigUpdateRequest::~ConfigUpdateRequest() {
  SharedDtor();
}

void ConfigUpdateRequest::SharedDtor() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (new_config_ != &::google::protobuf::internal::kEmptyString) {
    delete new_config_;
  }
  if (old_config_ != &::google::protobuf::internal::kEmptyString) {
    delete old_config_;
  }
  if (this != default_instance_) {
  }
}

void ConfigUpdateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigUpdateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigUpdateRequest_descriptor_;
}

const ConfigUpdateRequest& ConfigUpdateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

ConfigUpdateRequest* ConfigUpdateRequest::default_instance_ = NULL;

ConfigUpdateRequest* ConfigUpdateRequest::New() const {
  return new ConfigUpdateRequest;
}

void ConfigUpdateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_new_config()) {
      if (new_config_ != &::google::protobuf::internal::kEmptyString) {
        new_config_->clear();
      }
    }
    if (has_old_config()) {
      if (old_config_ != &::google::protobuf::internal::kEmptyString) {
        old_config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_type().data(), this->service_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_config;
        break;
      }
      
      // required string new_config = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_config().data(), this->new_config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_config;
        break;
      }
      
      // required string old_config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_config().data(), this->old_config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_type(), output);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  // required string new_config = 3;
  if (has_new_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_config().data(), this->new_config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_config(), output);
  }
  
  // required string old_config = 4;
  if (has_old_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_config().data(), this->old_config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->old_config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigUpdateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_type(), target);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  // required string new_config = 3;
  if (has_new_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_config().data(), this->new_config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_config(), target);
  }
  
  // required string old_config = 4;
  if (has_old_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_config().data(), this->old_config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->old_config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigUpdateRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }
    
    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required string new_config = 3;
    if (has_new_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_config());
    }
    
    // required string old_config = 4;
    if (has_old_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigUpdateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigUpdateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigUpdateRequest::MergeFrom(const ConfigUpdateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_new_config()) {
      set_new_config(from.new_config());
    }
    if (from.has_old_config()) {
      set_old_config(from.old_config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigUpdateRequest::CopyFrom(const ConfigUpdateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigUpdateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ConfigUpdateRequest::Swap(ConfigUpdateRequest* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(path_, other->path_);
    std::swap(new_config_, other->new_config_);
    std::swap(old_config_, other->old_config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigUpdateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigUpdateRequest_descriptor_;
  metadata.reflection = ConfigUpdateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigNotifyRequest::kPathFieldNumber;
const int ConfigNotifyRequest::kConfigFieldNumber;
#endif  // !_MSC_VER

ConfigNotifyRequest::ConfigNotifyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigNotifyRequest::InitAsDefaultInstance() {
}

ConfigNotifyRequest::ConfigNotifyRequest(const ConfigNotifyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigNotifyRequest::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigNotifyRequest::~ConfigNotifyRequest() {
  SharedDtor();
}

void ConfigNotifyRequest::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void ConfigNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigNotifyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigNotifyRequest_descriptor_;
}

const ConfigNotifyRequest& ConfigNotifyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

ConfigNotifyRequest* ConfigNotifyRequest::default_instance_ = NULL;

ConfigNotifyRequest* ConfigNotifyRequest::New() const {
  return new ConfigNotifyRequest;
}

void ConfigNotifyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigNotifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }
      
      // required string config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigNotifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // required string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigNotifyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // required string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigNotifyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required string config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigNotifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigNotifyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigNotifyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigNotifyRequest::MergeFrom(const ConfigNotifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigNotifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigNotifyRequest::CopyFrom(const ConfigNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigNotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ConfigNotifyRequest::Swap(ConfigNotifyRequest* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigNotifyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigNotifyRequest_descriptor_;
  metadata.reflection = ConfigNotifyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusRegisterRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusRegisterRequest::StatusRegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusRegisterRequest::InitAsDefaultInstance() {
  status_ = const_cast< ::config_server::Status*>(&::config_server::Status::default_instance());
}

StatusRegisterRequest::StatusRegisterRequest(const StatusRegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusRegisterRequest::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRegisterRequest::~StatusRegisterRequest() {
  SharedDtor();
}

void StatusRegisterRequest::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void StatusRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRegisterRequest_descriptor_;
}

const StatusRegisterRequest& StatusRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

StatusRegisterRequest* StatusRegisterRequest::default_instance_ = NULL;

StatusRegisterRequest* StatusRegisterRequest::New() const {
  return new StatusRegisterRequest;
}

void StatusRegisterRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::config_server::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .config_server.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .config_server.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .config_server.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusRegisterRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .config_server.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRegisterRequest::MergeFrom(const StatusRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::config_server::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRegisterRequest::CopyFrom(const StatusRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void StatusRegisterRequest::Swap(StatusRegisterRequest* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRegisterRequest_descriptor_;
  metadata.reflection = StatusRegisterRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusRefreshRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusRefreshRequest::StatusRefreshRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusRefreshRequest::InitAsDefaultInstance() {
  status_ = const_cast< ::config_server::Status*>(&::config_server::Status::default_instance());
}

StatusRefreshRequest::StatusRefreshRequest(const StatusRefreshRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusRefreshRequest::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRefreshRequest::~StatusRefreshRequest() {
  SharedDtor();
}

void StatusRefreshRequest::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void StatusRefreshRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRefreshRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRefreshRequest_descriptor_;
}

const StatusRefreshRequest& StatusRefreshRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

StatusRefreshRequest* StatusRefreshRequest::default_instance_ = NULL;

StatusRefreshRequest* StatusRefreshRequest::New() const {
  return new StatusRefreshRequest;
}

void StatusRefreshRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::config_server::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRefreshRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .config_server.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusRefreshRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .config_server.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusRefreshRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .config_server.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusRefreshRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .config_server.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRefreshRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRefreshRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRefreshRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRefreshRequest::MergeFrom(const StatusRefreshRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::config_server::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRefreshRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRefreshRequest::CopyFrom(const StatusRefreshRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRefreshRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void StatusRefreshRequest::Swap(StatusRefreshRequest* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRefreshRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRefreshRequest_descriptor_;
  metadata.reflection = StatusRefreshRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StatusQueryRequest::StatusQueryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusQueryRequest::InitAsDefaultInstance() {
}

StatusQueryRequest::StatusQueryRequest(const StatusQueryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusQueryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusQueryRequest::~StatusQueryRequest() {
  SharedDtor();
}

void StatusQueryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusQueryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusQueryRequest_descriptor_;
}

const StatusQueryRequest& StatusQueryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

StatusQueryRequest* StatusQueryRequest::default_instance_ = NULL;

StatusQueryRequest* StatusQueryRequest::New() const {
  return new StatusQueryRequest;
}

void StatusQueryRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StatusQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusQueryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusQueryRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusQueryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusQueryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusQueryRequest::MergeFrom(const StatusQueryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusQueryRequest::CopyFrom(const StatusQueryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusQueryRequest::IsInitialized() const {
  
  return true;
}

void StatusQueryRequest::Swap(StatusQueryRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusQueryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusQueryRequest_descriptor_;
  metadata.reflection = StatusQueryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusQueryResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusQueryResponse::StatusQueryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusQueryResponse::InitAsDefaultInstance() {
}

StatusQueryResponse::StatusQueryResponse(const StatusQueryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusQueryResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusQueryResponse::~StatusQueryResponse() {
  SharedDtor();
}

void StatusQueryResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusQueryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusQueryResponse_descriptor_;
}

const StatusQueryResponse& StatusQueryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

StatusQueryResponse* StatusQueryResponse::default_instance_ = NULL;

StatusQueryResponse* StatusQueryResponse::New() const {
  return new StatusQueryResponse;
}

void StatusQueryResponse::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .config_server.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .config_server.Status status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusQueryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .config_server.Status status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusQueryResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .config_server.Status status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusQueryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusQueryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusQueryResponse::MergeFrom(const StatusQueryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusQueryResponse::CopyFrom(const StatusQueryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusQueryResponse::IsInitialized() const {
  
  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void StatusQueryResponse::Swap(StatusQueryResponse* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusQueryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusQueryResponse_descriptor_;
  metadata.reflection = StatusQueryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerAcquireRequest::kServiceTypeFieldNumber;
#endif  // !_MSC_VER

ServerAcquireRequest::ServerAcquireRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerAcquireRequest::InitAsDefaultInstance() {
}

ServerAcquireRequest::ServerAcquireRequest(const ServerAcquireRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerAcquireRequest::SharedCtor() {
  _cached_size_ = 0;
  service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerAcquireRequest::~ServerAcquireRequest() {
  SharedDtor();
}

void ServerAcquireRequest::SharedDtor() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    delete service_type_;
  }
  if (this != default_instance_) {
  }
}

void ServerAcquireRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerAcquireRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerAcquireRequest_descriptor_;
}

const ServerAcquireRequest& ServerAcquireRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

ServerAcquireRequest* ServerAcquireRequest::default_instance_ = NULL;

ServerAcquireRequest* ServerAcquireRequest::New() const {
  return new ServerAcquireRequest;
}

void ServerAcquireRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service_type()) {
      if (service_type_ != &::google::protobuf::internal::kEmptyString) {
        service_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerAcquireRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_type().data(), this->service_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerAcquireRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerAcquireRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service_type = 1;
  if (has_service_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_type().data(), this->service_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerAcquireRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service_type = 1;
    if (has_service_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerAcquireRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerAcquireRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerAcquireRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerAcquireRequest::MergeFrom(const ServerAcquireRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_type()) {
      set_service_type(from.service_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerAcquireRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAcquireRequest::CopyFrom(const ServerAcquireRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAcquireRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerAcquireRequest::Swap(ServerAcquireRequest* other) {
  if (other != this) {
    std::swap(service_type_, other->service_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerAcquireRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerAcquireRequest_descriptor_;
  metadata.reflection = ServerAcquireRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerAcquireResponse::kServerAddrFieldNumber;
#endif  // !_MSC_VER

ServerAcquireResponse::ServerAcquireResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerAcquireResponse::InitAsDefaultInstance() {
}

ServerAcquireResponse::ServerAcquireResponse(const ServerAcquireResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerAcquireResponse::SharedCtor() {
  _cached_size_ = 0;
  server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerAcquireResponse::~ServerAcquireResponse() {
  SharedDtor();
}

void ServerAcquireResponse::SharedDtor() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete server_addr_;
  }
  if (this != default_instance_) {
  }
}

void ServerAcquireResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerAcquireResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerAcquireResponse_descriptor_;
}

const ServerAcquireResponse& ServerAcquireResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

ServerAcquireResponse* ServerAcquireResponse::default_instance_ = NULL;

ServerAcquireResponse* ServerAcquireResponse::New() const {
  return new ServerAcquireResponse;
}

void ServerAcquireResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_addr()) {
      if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
        server_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerAcquireResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_addr().data(), this->server_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerAcquireResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string server_addr = 1;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerAcquireResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string server_addr = 1;
  if (has_server_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_addr().data(), this->server_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerAcquireResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_addr = 1;
    if (has_server_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerAcquireResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerAcquireResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerAcquireResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerAcquireResponse::MergeFrom(const ServerAcquireResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_addr()) {
      set_server_addr(from.server_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerAcquireResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerAcquireResponse::CopyFrom(const ServerAcquireResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerAcquireResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerAcquireResponse::Swap(ServerAcquireResponse* other) {
  if (other != this) {
    std::swap(server_addr_, other->server_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerAcquireResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerAcquireResponse_descriptor_;
  metadata.reflection = ServerAcquireResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonResponse::kCodeFieldNumber;
#endif  // !_MSC_VER

CommonResponse::CommonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonResponse::InitAsDefaultInstance() {
}

CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonResponse::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonResponse::~CommonResponse() {
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonResponse_descriptor_;
}

const CommonResponse& CommonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_5fserver_2eproto();  return *default_instance_;
}

CommonResponse* CommonResponse::default_instance_ = NULL;

CommonResponse* CommonResponse::New() const {
  return new CommonResponse;
}

void CommonResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonResponse_descriptor_;
  metadata.reflection = CommonResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config_server

// @@protoc_insertion_point(global_scope)
