// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_server.proto

#ifndef PROTOBUF_config_5fserver_2eproto__INCLUDED
#define PROTOBUF_config_5fserver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace config_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_config_5fserver_2eproto();
void protobuf_AssignDesc_config_5fserver_2eproto();
void protobuf_ShutdownFile_config_5fserver_2eproto();

class Status;
class ConfigGetRequest;
class ConfigGetResponse;
class ConfigUpdateRequest;
class CFG_NOTIFY_REQUEST;
class StatusRegisterRequest;
class StatusRefreshRequest;
class StatusQueryRequest;
class StatusQueryResponse;
class ServerAcquireRequest;
class ServerAcquireResponse;
class CommonResponse;

enum CmdIDs {
  CmdID_ConfigGet = 1,
  CmdID_ConfigUpdate = 2,
  CmdID_ConfigNotify = 3,
  CmdID_StatusRegister = 4,
  CmdID_StatusRefresh = 5,
  CmdID_StatusQuery = 6,
  CmdID_ServerAcquire = 7
};
bool CmdIDs_IsValid(int value);
const CmdIDs CmdIDs_MIN = CmdID_ConfigGet;
const CmdIDs CmdIDs_MAX = CmdID_ServerAcquire;
const int CmdIDs_ARRAYSIZE = CmdIDs_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdIDs_descriptor();
inline const ::std::string& CmdIDs_Name(CmdIDs value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdIDs_descriptor(), value);
}
inline bool CmdIDs_Parse(
    const ::std::string& name, CmdIDs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdIDs>(
    CmdIDs_descriptor(), name, value);
}
enum NetworkType {
  NET_UNKNOWN = 1,
  NET_CT = 2,
  NET_CN = 3,
  NET_CM = 4
};
bool NetworkType_IsValid(int value);
const NetworkType NetworkType_MIN = NET_UNKNOWN;
const NetworkType NetworkType_MAX = NET_CM;
const int NetworkType_ARRAYSIZE = NetworkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetworkType_descriptor();
inline const ::std::string& NetworkType_Name(NetworkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetworkType_descriptor(), value);
}
inline bool NetworkType_Parse(
    const ::std::string& name, NetworkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkType>(
    NetworkType_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();
  
  Status(const Status& from);
  
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();
  
  void Swap(Status* other);
  
  // implements Message ----------------------------------------------
  
  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string server_addr = 1;
  inline bool has_server_addr() const;
  inline void clear_server_addr();
  static const int kServerAddrFieldNumber = 1;
  inline const ::std::string& server_addr() const;
  inline void set_server_addr(const ::std::string& value);
  inline void set_server_addr(const char* value);
  inline void set_server_addr(const char* value, size_t size);
  inline ::std::string* mutable_server_addr();
  inline ::std::string* release_server_addr();
  
  // required string service_type = 2;
  inline bool has_service_type() const;
  inline void clear_service_type();
  static const int kServiceTypeFieldNumber = 2;
  inline const ::std::string& service_type() const;
  inline void set_service_type(const ::std::string& value);
  inline void set_service_type(const char* value);
  inline void set_service_type(const char* value, size_t size);
  inline ::std::string* mutable_service_type();
  inline ::std::string* release_service_type();
  
  // optional .config_server.NetworkType network_type = 3;
  inline bool has_network_type() const;
  inline void clear_network_type();
  static const int kNetworkTypeFieldNumber = 3;
  inline config_server::NetworkType network_type() const;
  inline void set_network_type(config_server::NetworkType value);
  
  // optional string service_name = 4;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 4;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional uint32 load = 5;
  inline bool has_load() const;
  inline void clear_load();
  static const int kLoadFieldNumber = 5;
  inline ::google::protobuf::uint32 load() const;
  inline void set_load(::google::protobuf::uint32 value);
  
  // optional uint32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional uint32 last_activity = 7;
  inline bool has_last_activity() const;
  inline void clear_last_activity();
  static const int kLastActivityFieldNumber = 7;
  inline ::google::protobuf::uint32 last_activity() const;
  inline void set_last_activity(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:config_server.Status)
 private:
  inline void set_has_server_addr();
  inline void clear_has_server_addr();
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_network_type();
  inline void clear_has_network_type();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_load();
  inline void clear_has_load();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_last_activity();
  inline void clear_has_last_activity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_addr_;
  ::std::string* service_type_;
  ::std::string* service_name_;
  int network_type_;
  ::google::protobuf::uint32 load_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 last_activity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class ConfigGetRequest : public ::google::protobuf::Message {
 public:
  ConfigGetRequest();
  virtual ~ConfigGetRequest();
  
  ConfigGetRequest(const ConfigGetRequest& from);
  
  inline ConfigGetRequest& operator=(const ConfigGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigGetRequest& default_instance();
  
  void Swap(ConfigGetRequest* other);
  
  // implements Message ----------------------------------------------
  
  ConfigGetRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigGetRequest& from);
  void MergeFrom(const ConfigGetRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_type = 1;
  inline bool has_service_type() const;
  inline void clear_service_type();
  static const int kServiceTypeFieldNumber = 1;
  inline const ::std::string& service_type() const;
  inline void set_service_type(const ::std::string& value);
  inline void set_service_type(const char* value);
  inline void set_service_type(const char* value, size_t size);
  inline ::std::string* mutable_service_type();
  inline ::std::string* release_service_type();
  
  // optional string path = 2 [default = "."];
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:config_server.ConfigGetRequest)
 private:
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_type_;
  ::std::string* path_;
  static const ::std::string _default_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static ConfigGetRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConfigGetResponse : public ::google::protobuf::Message {
 public:
  ConfigGetResponse();
  virtual ~ConfigGetResponse();
  
  ConfigGetResponse(const ConfigGetResponse& from);
  
  inline ConfigGetResponse& operator=(const ConfigGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigGetResponse& default_instance();
  
  void Swap(ConfigGetResponse* other);
  
  // implements Message ----------------------------------------------
  
  ConfigGetResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigGetResponse& from);
  void MergeFrom(const ConfigGetResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  
  // @@protoc_insertion_point(class_scope:config_server.ConfigGetResponse)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* config_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static ConfigGetResponse* default_instance_;
};
// -------------------------------------------------------------------

class ConfigUpdateRequest : public ::google::protobuf::Message {
 public:
  ConfigUpdateRequest();
  virtual ~ConfigUpdateRequest();
  
  ConfigUpdateRequest(const ConfigUpdateRequest& from);
  
  inline ConfigUpdateRequest& operator=(const ConfigUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigUpdateRequest& default_instance();
  
  void Swap(ConfigUpdateRequest* other);
  
  // implements Message ----------------------------------------------
  
  ConfigUpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigUpdateRequest& from);
  void MergeFrom(const ConfigUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_type = 1;
  inline bool has_service_type() const;
  inline void clear_service_type();
  static const int kServiceTypeFieldNumber = 1;
  inline const ::std::string& service_type() const;
  inline void set_service_type(const ::std::string& value);
  inline void set_service_type(const char* value);
  inline void set_service_type(const char* value, size_t size);
  inline ::std::string* mutable_service_type();
  inline ::std::string* release_service_type();
  
  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required string config = 3;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 3;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  
  // @@protoc_insertion_point(class_scope:config_server.ConfigUpdateRequest)
 private:
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_config();
  inline void clear_has_config();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_type_;
  ::std::string* path_;
  ::std::string* config_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static ConfigUpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class CFG_NOTIFY_REQUEST : public ::google::protobuf::Message {
 public:
  CFG_NOTIFY_REQUEST();
  virtual ~CFG_NOTIFY_REQUEST();
  
  CFG_NOTIFY_REQUEST(const CFG_NOTIFY_REQUEST& from);
  
  inline CFG_NOTIFY_REQUEST& operator=(const CFG_NOTIFY_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CFG_NOTIFY_REQUEST& default_instance();
  
  void Swap(CFG_NOTIFY_REQUEST* other);
  
  // implements Message ----------------------------------------------
  
  CFG_NOTIFY_REQUEST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CFG_NOTIFY_REQUEST& from);
  void MergeFrom(const CFG_NOTIFY_REQUEST& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required string config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  
  // @@protoc_insertion_point(class_scope:config_server.CFG_NOTIFY_REQUEST)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_config();
  inline void clear_has_config();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  ::std::string* config_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CFG_NOTIFY_REQUEST* default_instance_;
};
// -------------------------------------------------------------------

class StatusRegisterRequest : public ::google::protobuf::Message {
 public:
  StatusRegisterRequest();
  virtual ~StatusRegisterRequest();
  
  StatusRegisterRequest(const StatusRegisterRequest& from);
  
  inline StatusRegisterRequest& operator=(const StatusRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRegisterRequest& default_instance();
  
  void Swap(StatusRegisterRequest* other);
  
  // implements Message ----------------------------------------------
  
  StatusRegisterRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusRegisterRequest& from);
  void MergeFrom(const StatusRegisterRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .config_server.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::config_server::Status& status() const;
  inline ::config_server::Status* mutable_status();
  inline ::config_server::Status* release_status();
  
  // @@protoc_insertion_point(class_scope:config_server.StatusRegisterRequest)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::config_server::Status* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StatusRegisterRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusRefreshRequest : public ::google::protobuf::Message {
 public:
  StatusRefreshRequest();
  virtual ~StatusRefreshRequest();
  
  StatusRefreshRequest(const StatusRefreshRequest& from);
  
  inline StatusRefreshRequest& operator=(const StatusRefreshRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRefreshRequest& default_instance();
  
  void Swap(StatusRefreshRequest* other);
  
  // implements Message ----------------------------------------------
  
  StatusRefreshRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusRefreshRequest& from);
  void MergeFrom(const StatusRefreshRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .config_server.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::config_server::Status& status() const;
  inline ::config_server::Status* mutable_status();
  inline ::config_server::Status* release_status();
  
  // @@protoc_insertion_point(class_scope:config_server.StatusRefreshRequest)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::config_server::Status* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StatusRefreshRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusQueryRequest : public ::google::protobuf::Message {
 public:
  StatusQueryRequest();
  virtual ~StatusQueryRequest();
  
  StatusQueryRequest(const StatusQueryRequest& from);
  
  inline StatusQueryRequest& operator=(const StatusQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusQueryRequest& default_instance();
  
  void Swap(StatusQueryRequest* other);
  
  // implements Message ----------------------------------------------
  
  StatusQueryRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusQueryRequest& from);
  void MergeFrom(const StatusQueryRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:config_server.StatusQueryRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StatusQueryRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusQueryResponse : public ::google::protobuf::Message {
 public:
  StatusQueryResponse();
  virtual ~StatusQueryResponse();
  
  StatusQueryResponse(const StatusQueryResponse& from);
  
  inline StatusQueryResponse& operator=(const StatusQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusQueryResponse& default_instance();
  
  void Swap(StatusQueryResponse* other);
  
  // implements Message ----------------------------------------------
  
  StatusQueryResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusQueryResponse& from);
  void MergeFrom(const StatusQueryResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .config_server.Status status = 1;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::config_server::Status& status(int index) const;
  inline ::config_server::Status* mutable_status(int index);
  inline ::config_server::Status* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::config_server::Status >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::config_server::Status >*
      mutable_status();
  
  // @@protoc_insertion_point(class_scope:config_server.StatusQueryResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::config_server::Status > status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static StatusQueryResponse* default_instance_;
};
// -------------------------------------------------------------------

class ServerAcquireRequest : public ::google::protobuf::Message {
 public:
  ServerAcquireRequest();
  virtual ~ServerAcquireRequest();
  
  ServerAcquireRequest(const ServerAcquireRequest& from);
  
  inline ServerAcquireRequest& operator=(const ServerAcquireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAcquireRequest& default_instance();
  
  void Swap(ServerAcquireRequest* other);
  
  // implements Message ----------------------------------------------
  
  ServerAcquireRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerAcquireRequest& from);
  void MergeFrom(const ServerAcquireRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_type = 1;
  inline bool has_service_type() const;
  inline void clear_service_type();
  static const int kServiceTypeFieldNumber = 1;
  inline const ::std::string& service_type() const;
  inline void set_service_type(const ::std::string& value);
  inline void set_service_type(const char* value);
  inline void set_service_type(const char* value, size_t size);
  inline ::std::string* mutable_service_type();
  inline ::std::string* release_service_type();
  
  // @@protoc_insertion_point(class_scope:config_server.ServerAcquireRequest)
 private:
  inline void set_has_service_type();
  inline void clear_has_service_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static ServerAcquireRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerAcquireResponse : public ::google::protobuf::Message {
 public:
  ServerAcquireResponse();
  virtual ~ServerAcquireResponse();
  
  ServerAcquireResponse(const ServerAcquireResponse& from);
  
  inline ServerAcquireResponse& operator=(const ServerAcquireResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAcquireResponse& default_instance();
  
  void Swap(ServerAcquireResponse* other);
  
  // implements Message ----------------------------------------------
  
  ServerAcquireResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerAcquireResponse& from);
  void MergeFrom(const ServerAcquireResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string server_addr = 1;
  inline bool has_server_addr() const;
  inline void clear_server_addr();
  static const int kServerAddrFieldNumber = 1;
  inline const ::std::string& server_addr() const;
  inline void set_server_addr(const ::std::string& value);
  inline void set_server_addr(const char* value);
  inline void set_server_addr(const char* value, size_t size);
  inline ::std::string* mutable_server_addr();
  inline ::std::string* release_server_addr();
  
  // @@protoc_insertion_point(class_scope:config_server.ServerAcquireResponse)
 private:
  inline void set_has_server_addr();
  inline void clear_has_server_addr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_addr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static ServerAcquireResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommonResponse : public ::google::protobuf::Message {
 public:
  CommonResponse();
  virtual ~CommonResponse();
  
  CommonResponse(const CommonResponse& from);
  
  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();
  
  void Swap(CommonResponse* other);
  
  // implements Message ----------------------------------------------
  
  CommonResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:config_server.CommonResponse)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_config_5fserver_2eproto();
  friend void protobuf_AssignDesc_config_5fserver_2eproto();
  friend void protobuf_ShutdownFile_config_5fserver_2eproto();
  
  void InitAsDefaultInstance();
  static CommonResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Status

// required string server_addr = 1;
inline bool Status::has_server_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_server_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_server_addr() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    server_addr_->clear();
  }
  clear_has_server_addr();
}
inline const ::std::string& Status::server_addr() const {
  return *server_addr_;
}
inline void Status::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void Status::set_server_addr(const char* value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void Status::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_server_addr() {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  return server_addr_;
}
inline ::std::string* Status::release_server_addr() {
  clear_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_addr_;
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string service_type = 2;
inline bool Status::has_service_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_service_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_service_type() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    service_type_->clear();
  }
  clear_has_service_type();
}
inline const ::std::string& Status::service_type() const {
  return *service_type_;
}
inline void Status::set_service_type(const ::std::string& value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void Status::set_service_type(const char* value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void Status::set_service_type(const char* value, size_t size) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_service_type() {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  return service_type_;
}
inline ::std::string* Status::release_service_type() {
  clear_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_type_;
    service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .config_server.NetworkType network_type = 3;
inline bool Status::has_network_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_network_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_network_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_network_type() {
  network_type_ = 1;
  clear_has_network_type();
}
inline config_server::NetworkType Status::network_type() const {
  return static_cast< config_server::NetworkType >(network_type_);
}
inline void Status::set_network_type(config_server::NetworkType value) {
  GOOGLE_DCHECK(config_server::NetworkType_IsValid(value));
  set_has_network_type();
  network_type_ = value;
}

// optional string service_name = 4;
inline bool Status::has_service_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Status::set_has_service_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Status::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Status::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& Status::service_name() const {
  return *service_name_;
}
inline void Status::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void Status::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void Status::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* Status::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 load = 5;
inline bool Status::has_load() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Status::set_has_load() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Status::clear_has_load() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Status::clear_load() {
  load_ = 0u;
  clear_has_load();
}
inline ::google::protobuf::uint32 Status::load() const {
  return load_;
}
inline void Status::set_load(::google::protobuf::uint32 value) {
  set_has_load();
  load_ = value;
}

// optional uint32 status = 6;
inline bool Status::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Status::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Status::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Status::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 Status::status() const {
  return status_;
}
inline void Status::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 last_activity = 7;
inline bool Status::has_last_activity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Status::set_has_last_activity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Status::clear_has_last_activity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Status::clear_last_activity() {
  last_activity_ = 0u;
  clear_has_last_activity();
}
inline ::google::protobuf::uint32 Status::last_activity() const {
  return last_activity_;
}
inline void Status::set_last_activity(::google::protobuf::uint32 value) {
  set_has_last_activity();
  last_activity_ = value;
}

// -------------------------------------------------------------------

// ConfigGetRequest

// required string service_type = 1;
inline bool ConfigGetRequest::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigGetRequest::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigGetRequest::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigGetRequest::clear_service_type() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    service_type_->clear();
  }
  clear_has_service_type();
}
inline const ::std::string& ConfigGetRequest::service_type() const {
  return *service_type_;
}
inline void ConfigGetRequest::set_service_type(const ::std::string& value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void ConfigGetRequest::set_service_type(const char* value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void ConfigGetRequest::set_service_type(const char* value, size_t size) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigGetRequest::mutable_service_type() {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  return service_type_;
}
inline ::std::string* ConfigGetRequest::release_service_type() {
  clear_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_type_;
    service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string path = 2 [default = "."];
inline bool ConfigGetRequest::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigGetRequest::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigGetRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigGetRequest::clear_path() {
  if (path_ != &_default_path_) {
    path_->assign(_default_path_);
  }
  clear_has_path();
}
inline const ::std::string& ConfigGetRequest::path() const {
  return *path_;
}
inline void ConfigGetRequest::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ConfigGetRequest::set_path(const char* value) {
  set_has_path();
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ConfigGetRequest::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigGetRequest::mutable_path() {
  set_has_path();
  if (path_ == &_default_path_) {
    path_ = new ::std::string(_default_path_);
  }
  return path_;
}
inline ::std::string* ConfigGetRequest::release_path() {
  clear_has_path();
  if (path_ == &_default_path_) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&_default_path_);
    return temp;
  }
}

// -------------------------------------------------------------------

// ConfigGetResponse

// required string config = 1;
inline bool ConfigGetResponse::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigGetResponse::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigGetResponse::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigGetResponse::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& ConfigGetResponse::config() const {
  return *config_;
}
inline void ConfigGetResponse::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void ConfigGetResponse::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void ConfigGetResponse::set_config(const char* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigGetResponse::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* ConfigGetResponse::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ConfigUpdateRequest

// required string service_type = 1;
inline bool ConfigUpdateRequest::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigUpdateRequest::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfigUpdateRequest::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfigUpdateRequest::clear_service_type() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    service_type_->clear();
  }
  clear_has_service_type();
}
inline const ::std::string& ConfigUpdateRequest::service_type() const {
  return *service_type_;
}
inline void ConfigUpdateRequest::set_service_type(const ::std::string& value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void ConfigUpdateRequest::set_service_type(const char* value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void ConfigUpdateRequest::set_service_type(const char* value, size_t size) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigUpdateRequest::mutable_service_type() {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  return service_type_;
}
inline ::std::string* ConfigUpdateRequest::release_service_type() {
  clear_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_type_;
    service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string path = 2;
inline bool ConfigUpdateRequest::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfigUpdateRequest::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfigUpdateRequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfigUpdateRequest::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ConfigUpdateRequest::path() const {
  return *path_;
}
inline void ConfigUpdateRequest::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ConfigUpdateRequest::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ConfigUpdateRequest::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigUpdateRequest::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ConfigUpdateRequest::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string config = 3;
inline bool ConfigUpdateRequest::has_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfigUpdateRequest::set_has_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConfigUpdateRequest::clear_has_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConfigUpdateRequest::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& ConfigUpdateRequest::config() const {
  return *config_;
}
inline void ConfigUpdateRequest::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void ConfigUpdateRequest::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void ConfigUpdateRequest::set_config(const char* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfigUpdateRequest::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* ConfigUpdateRequest::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CFG_NOTIFY_REQUEST

// required string path = 1;
inline bool CFG_NOTIFY_REQUEST::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFG_NOTIFY_REQUEST::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CFG_NOTIFY_REQUEST::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CFG_NOTIFY_REQUEST::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& CFG_NOTIFY_REQUEST::path() const {
  return *path_;
}
inline void CFG_NOTIFY_REQUEST::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CFG_NOTIFY_REQUEST::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CFG_NOTIFY_REQUEST::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CFG_NOTIFY_REQUEST::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* CFG_NOTIFY_REQUEST::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string config = 2;
inline bool CFG_NOTIFY_REQUEST::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFG_NOTIFY_REQUEST::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CFG_NOTIFY_REQUEST::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CFG_NOTIFY_REQUEST::clear_config() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& CFG_NOTIFY_REQUEST::config() const {
  return *config_;
}
inline void CFG_NOTIFY_REQUEST::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void CFG_NOTIFY_REQUEST::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(value);
}
inline void CFG_NOTIFY_REQUEST::set_config(const char* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CFG_NOTIFY_REQUEST::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    config_ = new ::std::string;
  }
  return config_;
}
inline ::std::string* CFG_NOTIFY_REQUEST::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// StatusRegisterRequest

// required .config_server.Status status = 1;
inline bool StatusRegisterRequest::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusRegisterRequest::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusRegisterRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusRegisterRequest::clear_status() {
  if (status_ != NULL) status_->::config_server::Status::Clear();
  clear_has_status();
}
inline const ::config_server::Status& StatusRegisterRequest::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::config_server::Status* StatusRegisterRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::config_server::Status;
  return status_;
}
inline ::config_server::Status* StatusRegisterRequest::release_status() {
  clear_has_status();
  ::config_server::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// StatusRefreshRequest

// required .config_server.Status status = 1;
inline bool StatusRefreshRequest::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusRefreshRequest::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusRefreshRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusRefreshRequest::clear_status() {
  if (status_ != NULL) status_->::config_server::Status::Clear();
  clear_has_status();
}
inline const ::config_server::Status& StatusRefreshRequest::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::config_server::Status* StatusRefreshRequest::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::config_server::Status;
  return status_;
}
inline ::config_server::Status* StatusRefreshRequest::release_status() {
  clear_has_status();
  ::config_server::Status* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// StatusQueryRequest

// -------------------------------------------------------------------

// StatusQueryResponse

// repeated .config_server.Status status = 1;
inline int StatusQueryResponse::status_size() const {
  return status_.size();
}
inline void StatusQueryResponse::clear_status() {
  status_.Clear();
}
inline const ::config_server::Status& StatusQueryResponse::status(int index) const {
  return status_.Get(index);
}
inline ::config_server::Status* StatusQueryResponse::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::config_server::Status* StatusQueryResponse::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::config_server::Status >&
StatusQueryResponse::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::config_server::Status >*
StatusQueryResponse::mutable_status() {
  return &status_;
}

// -------------------------------------------------------------------

// ServerAcquireRequest

// required string service_type = 1;
inline bool ServerAcquireRequest::has_service_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerAcquireRequest::set_has_service_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerAcquireRequest::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerAcquireRequest::clear_service_type() {
  if (service_type_ != &::google::protobuf::internal::kEmptyString) {
    service_type_->clear();
  }
  clear_has_service_type();
}
inline const ::std::string& ServerAcquireRequest::service_type() const {
  return *service_type_;
}
inline void ServerAcquireRequest::set_service_type(const ::std::string& value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void ServerAcquireRequest::set_service_type(const char* value) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(value);
}
inline void ServerAcquireRequest::set_service_type(const char* value, size_t size) {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  service_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerAcquireRequest::mutable_service_type() {
  set_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    service_type_ = new ::std::string;
  }
  return service_type_;
}
inline ::std::string* ServerAcquireRequest::release_service_type() {
  clear_has_service_type();
  if (service_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_type_;
    service_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ServerAcquireResponse

// required string server_addr = 1;
inline bool ServerAcquireResponse::has_server_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerAcquireResponse::set_has_server_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerAcquireResponse::clear_has_server_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerAcquireResponse::clear_server_addr() {
  if (server_addr_ != &::google::protobuf::internal::kEmptyString) {
    server_addr_->clear();
  }
  clear_has_server_addr();
}
inline const ::std::string& ServerAcquireResponse::server_addr() const {
  return *server_addr_;
}
inline void ServerAcquireResponse::set_server_addr(const ::std::string& value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void ServerAcquireResponse::set_server_addr(const char* value) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(value);
}
inline void ServerAcquireResponse::set_server_addr(const char* value, size_t size) {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  server_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerAcquireResponse::mutable_server_addr() {
  set_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    server_addr_ = new ::std::string;
  }
  return server_addr_;
}
inline ::std::string* ServerAcquireResponse::release_server_addr() {
  clear_has_server_addr();
  if (server_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_addr_;
    server_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CommonResponse

// required uint32 code = 1;
inline bool CommonResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonResponse::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 CommonResponse::code() const {
  return code_;
}
inline void CommonResponse::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace config_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< config_server::CmdIDs>() {
  return config_server::CmdIDs_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< config_server::NetworkType>() {
  return config_server::NetworkType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_5fserver_2eproto__INCLUDED
